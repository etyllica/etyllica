<?xml version="1.0"?>
<project name="Etyllica" default="dist" basedir="." xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <path id="maven-ant-tasks.classpath" path="maven/libs/maven-ant-tasks-2.1.3.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
           uri="antlib:org.apache.maven.artifact.ant"
           classpathref="maven-ant-tasks.classpath" />
        
  <property name="version" value="5.3.1" /><!-- Change version in maven/pom.xml-->
  <property name="maven-version" value="${version}" />

  <property name="libcore"     value="etyllica-${version}" />
  <property name="libutil"     value="etyllica-util-${version}" />
  <property name="libsound"    value="etyllica-sound-${version}" />

  <property name="src.dir"     value="src/main/java" />
  <property name="test.dir"    value="src/test/java" />
  <property name="build.dir"   value="src/bin" />
  <property name="lib.dir"     value="libs"/>
  <property name="maven.dir"   value="maven"/>
  <property name="reports.dir" value="tests"/>

  <!-- define Maven coordinates -->
  <property name="groupId" value="br.com.etyllica" />
  <property name="artifactId" value="etyllica" />
  <!-- define artifacts' name, which follows the convention of Maven -->
  <property name="jar" value="${lib.dir}/${artifactId}-${maven-version}.jar" />
  <property name="javadoc-jar" value="${lib.dir}/${artifactId}-${maven-version}-javadoc.jar" />
  <property name="sources-jar" value="${lib.dir}/${artifactId}-${maven-version}-sources.jar" />
  <!-- defined maven snapshots and staging repository id and url -->
  <property name="ossrh-snapshots-repository-url" 
            value="https://oss.sonatype.org/content/repositories/snapshots/" />
  <property name="ossrh-staging-repository-url" 
            value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
  <property name="ossrh-server-id" value="ossrh" />
  
  <target name="dist" depends="clean, package">
    <mkdir dir="${maven.dir}/javadoc" />
    <javadoc sourcepath="${src.dir}" destdir="${maven.dir}/javadoc" />
    <jar jarfile="${javadoc-jar}">
      <fileset dir="${maven.dir}/javadoc" />
    </jar>
    <jar jarfile="${sources-jar}">
      <fileset dir="${src.dir}" />
    </jar>
  </target>

  <target name="deploy" depends="dist" description="deploy snapshot version to Maven snapshot repository">
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.6:deploy-file" />
      <arg value="-Durl=${ossrh-snapshots-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${jar}" />
    </artifact:mvn>
  </target>

  <!-- before this, update project version (both build.xml and maven/pom.xml) from SNAPSHOT to RELEASE(version) -->
  <target name="stage" depends="dist" description="deploy release version to Maven staging repository">
    <!-- sign and deploy the main artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${jar}" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the sources artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${sources-jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- sign and deploy the javadoc artifact -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
      <arg value="-Durl=${ossrh-staging-repository-url}" />
      <arg value="-DrepositoryId=${ossrh-server-id}" />
      <arg value="-DpomFile=${maven.dir}/pom.xml" />
      <arg value="-Dfile=${javadoc-jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

  <target name="clean">
    <delete includeemptydirs="true" >
      <fileset dir="${build.dir}">
	<exclude name="**/assets/*"/>
	<exclude name="**/assets/**"/>
      </fileset>
    </delete>
  </target>

  <target name="prepare">
    <copy todir="${build.dir}/sound/javazoom/decoder/">
      <fileset dir="${src.dir}/sound/javazoom/decoder/">
	<include name="**/*.ser"/>
      </fileset>
    </copy>
  </target>

  <target name="init">
    <mkdir dir="${build.dir}" />
  </target>
  
  <target name="compile" depends="init">
    <mkdir dir="${build.dir}"/>
    <javac srcdir="${src.dir}" destdir="${build.dir}" source="1.6" target="1.6" debug="off" />
  </target>

  <target name="compile-tests">
    <javac srcdir="${test.dir}" destdir="${build.dir}" includeantruntime="false" source="1.6" target="1.6" debug="off">
      <classpath>
	<fileset dir="${reports.dir}">
	  <include name="*.jar"/>
	</fileset>
      </classpath>
    </javac>
  </target>

  <target name="package" depends="compile, prepare">
    <jar destfile="${lib.dir}/${libcore}.jar">
      <fileset dir="${build.dir}">
	<include name="**/br/com/etyllica/*"/>
	<include name="**/br/com/etyllica/**"/>
	<include name="**/com/badlogic/gdx/*"/>
	<include name="**/com/badlogic/gdx/**"/>
      </fileset>
    </jar>
    <jar destfile="${jar}">
      <fileset dir="${build.dir}">
	<include name="**/br/com/etyllica/*"/>
	<include name="**/br/com/etyllica/**"/>
	<include name="**/com/badlogic/gdx/*"/>
	<include name="**/com/badlogic/gdx/**"/>
      </fileset>
    </jar>
    <jar destfile="${lib.dir}/${libutil}.jar">
      <fileset dir="${build.dir}">
	<include name="**/br/com/etyllica/util/*"/>
	<include name="**/br/com/etyllica/util/**"/>
      </fileset>
    </jar>
    <jar destfile="${lib.dir}/${libsound}.jar">
      <fileset dir="${build.dir}">
	<include name="**/sound/*"/>
	<include name="**/sound/**"/>
      </fileset>
    </jar>
  </target>

  <target name="test" depends="compile, compile-tests">
    <junit printsummary="yes" haltonfailure="yes" showoutput="true">
      <classpath>
	<pathelement location="${build.dir}"/>
	<fileset dir="${reports.dir}">
	  <include name="*.jar"/>
        </fileset>
      </classpath>
      <batchtest>
	<fileset dir="${test.dir}">
	  <include name="**/*Test*.java"/>
	  <exclude name="**/*CoreTest*.java"/>
	  <exclude name="**/*AWT*.java"/>
	</fileset>
      </batchtest>
      <formatter type="brief" usefile="false"/>
    </junit>
  </target>
</project>
